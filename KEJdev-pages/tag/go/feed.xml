<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://kejdev.github.io/tag/go/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://kejdev.github.io/" rel="alternate" type="text/html" />
  <updated>2019-12-07T23:34:54+09:00</updated>
  <id>https://kejdev.github.io/tag/go/feed.xml</id>

  
  
  

  
    <title type="html">덕복희 | </title>
  

  
    <subtitle>If i was rich, i would eat tteokbokki every day.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">GO 언어 설치하기</title>
      <link href="https://kejdev.github.io/GO-Grammar-2" rel="alternate" type="text/html" title="GO 언어 설치하기" />
      <published>2019-12-04T18:00:00+09:00</published>
      <updated>2019-12-04T18:00:00+09:00</updated>
      <id>https://kejdev.github.io/GO-Grammar-2</id>
      <content type="html" xml:base="https://kejdev.github.io/GO-Grammar-2">&lt;p&gt;GO언어를 설치해보도록 하겠습니다. 생각보다 설치하는 건 어렵지도 않고 여러가지 설정 할 것도 별로 없으니 10분이면 설치할 수 있습니다.&lt;/p&gt;

&lt;p&gt;우선 설치파일 다운해봅시다. &lt;a href=&quot;https://golang.org/dl/&quot;&gt;여기&lt;/a&gt;를 클릭하면 아래와 같은 화면이 나오는데 OS에 맞는 설치파일 다운합니다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;../assets/images/go1.png&quot; width=&quot;550&quot; height=&quot;350&quot; /&gt;&lt;/center&gt;

&lt;p&gt;저는 맥과 윈도우 두가지를 같이 쓰고 있는데, 우선 윈도우랑 맥이랑 그렇게 설치방법이 다르지 않으니 그냥 윈도우로 진행하겠습니다.
혹시나 GO언어를 설치는 하기 싫지만, 예제나, 코드를 구현하고 싶다면 &lt;a href=&quot;https://play.golang.org/&quot;&gt;여기&lt;/a&gt;에 들어가시면 GO언어를 사용하실 수 있습니다. 이 웹에서 사용 하는 GO 놀이터를 이용하면 설치도 안해도 되면서 항상 최신버전으로 유지하고 있으니 간접적으로 체험하시고 싶거나 간단히 테스트 할때, 사용하시면 유용할 것같네요.&lt;/p&gt;

&lt;p&gt;설치를 끝냈으면 GOROOT를 설정해야합니다. 만약 설치 경로가 C:\Go라면 GOROOT를 설정할 필요가 없습니다. 그렇지 않은 경우에는 따로 설정을 해주셔야 합니다. 따로 설정 할 경우에는 시스템 속성 -&amp;gt; 환경변수 -&amp;gt; ‘새로 만들기(N)’ 선택 후 설정 해주시면 되겠습니다.&lt;/p&gt;

&lt;p&gt;GOPATH설정 또한 해줘야하는데, 아래와 같이 설정하시면 됩니다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;../assets/images/go2.png&quot; width=&quot;450&quot; height=&quot;350&quot; /&gt;&lt;/center&gt;

&lt;p&gt;전 gogo라는 폴더를 따로 만들었고 GOROOT 잡은것과 동일하게 gogo폴더로 PATH잡아주면 설정은 끝난답니다.&lt;br /&gt;
설정을 잘했는지 확인을 해봐야겠지요?&lt;/p&gt;

&lt;p&gt;cmd.exe실행 해서 아래와 같이 명령어를 치면 설정했던 경로를 확인 해볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo %GOROOT%
echo %GOPATH%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 설치는 끝났습니다. 생각보다 쉽죠 ??&lt;br /&gt;
다음 포스팅때, 기본 문법과 실행법에 대해 알아보겠습니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>KEJdev</name>
        
        
      </author>

      

      
        <category term="GO" />
      

      
        <summary type="html">GO언어를 설치해보도록 하겠습니다. 생각보다 설치하는 건 어렵지도 않고 여러가지 설정 할 것도 별로 없으니 10분이면 설치할 수 있습니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">GO 언어란?</title>
      <link href="https://kejdev.github.io/GO-Grammar-1" rel="alternate" type="text/html" title="GO 언어란?" />
      <published>2019-12-03T22:00:00+09:00</published>
      <updated>2019-12-03T22:00:00+09:00</updated>
      <id>https://kejdev.github.io/GO-Grammar-1</id>
      <content type="html" xml:base="https://kejdev.github.io/GO-Grammar-1">&lt;p&gt;GO언어는 요즘 Docker가 떠오르면서 같이 떠오르는 새로운 언어입니다. &lt;br /&gt;
또한 구글에서 만든 언어라고 해서 사람들이 더 관심을 가지고 보는 언어죠. GO언어가 어떤 언어인지 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;go&quot;&gt;GO&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;center&gt;&lt;img src=&quot;../assets/images/goicon.png&quot; width=&quot;200&quot; height=&quot;140&quot; /&gt;&lt;/center&gt;

&lt;p&gt;GO언어는 범용 프로그래밍 언어이며, 깔끔하고 간결하게 생산성 높은 프로그래밍이 가능합니다. GO언어는 문법이 그렇게 복잡하지 않아서 생각보다 문법적으로는 어렵지 않습니다.&lt;/p&gt;

&lt;p&gt;또한 빠른 컴파일이 가능하다는 것과 정적 자료형 언어이지만 동적 자료형 언어로 프로그래밍을 작성하는 것 같은 느낌을 주는 것이 가장 큰 장점입니다. 마지막으로 동시성을 지원하는 코드를 쉽게 작성 가능 하다는 것도 장점으로 들 수 있겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;go언어가-생산성이-높은-이유&quot;&gt;GO언어가 생산성이 높은 이유&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;위에서 말했던 것처럼 GO언어가 생산성이 높다고 이야기 했는데, 그 이유는 무엇일까요?&lt;/p&gt;

&lt;p&gt;GO언어는 편리한 자료형 추론을 제공하는 것은 물론이고 반복해서 자료형 이름을 쓰지 않아도 된답니다. 특히나 제일 좋은 것은 소스 코드 형식을 자동으로 맞춰주는 도구 등 여러 편리한 도구들이 있습니다. (사용해봤는데, 너무 좋습니다…ㅠㅠ)&lt;/p&gt;

&lt;p&gt;함수 리터럴 및 클로저를 자유자재로 사용 가능하고, 명시적으로 인터페이스를 지정하지 않아도 인터페이스 구현이 가능합니다. 유닛테스트 또한 다른 언어에 비해 무척이나 간단합니다. GO 언어에서는 채널이라는 개념이 있는데, 이 채널을 이용하여 동시성 구현을 락 등을 이용하지 않고 간편하게 할 수 있습니다. 언어 고유의 지원으로 교착 상태나 경재 상태 파악이 쉬다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;즉, 고성능 동시성 프로그램을 간편하게 구현을 할 수 있으며, 컴파일 속도가 매우 빨라서 컴파일 및 테스트를 반복적으로 수행하면서 코드를 작성 할 수 있으며, 메모리  관리에 쉽습니다.  이렇게 장점이 많은 GO언어! 정말 대단한거 같습니다.&lt;/p&gt;

&lt;p&gt;현재 GO언어는 2015년 2월 17일에 1.4.2 버전이 안정 버전으로 출시 되었으며 1.0 이후 2.0이 되기 전까지 하위 호환성을 해치지지 않는 선에서 새로 업데이트 되고 있다고 합니다.&lt;/p&gt;

&lt;p&gt;다음 시간에는 GO설치 및 구문에 대해서 포스팅 해보도록 하겠습니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>KEJdev</name>
        
        
      </author>

      

      
        <category term="GO" />
      

      
        <summary type="html">GO언어는 요즘 Docker가 떠오르면서 같이 떠오르는 새로운 언어입니다. 또한 구글에서 만든 언어라고 해서 사람들이 더 관심을 가지고 보는 언어죠. GO언어가 어떤 언어인지 알아보겠습니다.</summary>
      

      
      
    </entry>
  
</feed>
